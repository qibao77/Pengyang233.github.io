{"pages":[{"title":"About","date":"2020-07-28T02:05:34.514Z","path":"about/index.html","text":""},{"title":"Categories","date":"2020-07-28T02:05:34.514Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2020-07-28T02:05:34.514Z","path":"tags/index.html","text":""}],"posts":[{"title":"GAN","date":"2020-07-28T02:05:34.514Z","path":"wiki/深度学习/GAN/","text":"GAN 在文章提出的时候，D和G都是MLP的形式，实验的数据库都是分辨率不大的数据库，如mnistObjective Function$$ min_Gmax_DV(D, G) = E_{x~p_{data(x)}}[logD(x)]+E_{z~p_z}[log(1-D(G(z)))]$$Loss的代码实现 D123456789BCELoss &#x3D; nn.BCELoss()...D_real &#x3D; netD(x)D_real_loss &#x3D; BCELoss(D_real, 1) %这里1的shape的应该是[bs,1]D_fake &#x3D; netD(netG(z))D_fake_loss &#x3D; BCELoss(D_fake, 0) %同上D_loss &#x3D; D_real_loss + D_fake_lossD_loss.backward()D_optimizer.step() G1234D_fake &#x3D; netD(netG(z))G_loss &#x3D; BCEloss(D_fake, 1)G_loss.backward()G_optimizer.step() CGAN 在D和G的输入部分分别添加了条件向量 $y$，输入到网络的第一步是将输入进行cat PS:在原始的GAN中，输入和输出都是很小尺寸的图象，比如mnist中 $28\\times28$ ，在代码实现中将图象resize成了一个向量然后和条件进行cat了。 Objective Function:$$min_Gmax_DV(D, G)=E_{x~p_{data(x)}}[logD(x|y)]+E_{z~p_z(z)}[log(1-D(G(z|y))]$$ Loss的代码实现： D: 1234567D_real &#x3D; netD(x, y)D_fake &#x3D; netD(z, y)D_real_loss &#x3D; nn.BCELoss()D_fake_loss &#x3D; nn.BCELoss()D_loss &#x3D; D_real_loss + D_fake_lossD.backward()D_optimizer.step() G12345G_fake &#x3D; netG(z,y)D_fake &#x3D; net(G_fake, y)G_loss &#x3D; nn.BECLoss(D_fake, y_real_)G_loss.backward()G_optimizer.step() SAGAN SAGAN是在GAN的基础上添加了自注意力模块(self attention model)，考虑了长距离依赖的问题，生成的结果比较好。 目标函数没有改，和普通的GAN是一样的Loss代码实现 也可以用上面的bceloss来实现","tags":[],"categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"常用操作","date":"2020-07-28T02:05:34.514Z","path":"wiki/编程/Matlab/常用操作/","text":"一次性连续跑多个 .m 文件12345678clc;close;clear;run('file1.m'); % 若此.m文件不在路径中，则会报错，或者可以采用绝对路径来指示 .m 文件的位置clear;run('file2.m');clear;run('file3.m'); 其余的相关信息查阅 run 的文档","tags":[],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Matlab","slug":"编程/Matlab","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Matlab/"}]},{"title":"Conda","date":"2020-07-28T02:05:34.514Z","path":"wiki/编程/Python/Conda/","text":"常用 Conda 命令虚拟环境相关 激活虚拟环境 1$ source activate env_name 退出当前的虚拟环境 1$ source deactivate 列出所有的虚拟环境 1$ conda env list 创建新的虚拟环境 12$ conda creat -n new_env_name python=X.X #指定新环境的python版本号，如3.6，2.7等$ conda create -n new_env_name --clone exist_env_name # 复制一个已有的虚拟环境, exist_env_name是当前存在的虚拟环境 删除环境 1$ conda env remove -n env_name","tags":[],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"编程/Python","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Python/"}]},{"title":"Bug","date":"2020-07-28T02:05:34.514Z","path":"wiki/编程/Pytorch/Bug/","text":"RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation 往往出现在更新代码 model.step() 之后 原因在于新版的pytorch (v1.5+) 似乎更新了什么，导致这一问题在老版本（可能是1.4以下）不会报错，而在新版会报错。 解决的方法： pytorch 降级 查看是否包含inplace操作，可以重点查看： Relu等激活函数中传入的 inplace参数应为False 有没有对Tensor有 +=, -=, *=, /=的类似操作，如 1a += b #a,b 都是Tensor 对于GAN的训练来说，可能会有一些差别，问题常常出现在 G/D_optim.step处，查阅如下的帖子：贴子1，帖子2","tags":[],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Pytorch","slug":"编程/Pytorch","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Pytorch/"}]},{"title":"常用操作","date":"2020-07-28T02:05:34.514Z","path":"wiki/编程/Pytorch/常用操作/","text":"数据类型的转换 List 转 Tensor ： 可以使用如下三种方式 123&gt;&gt; torch.cat(a) # Type(a) is List&gt;&gt; torch.stack(a)&gt;&gt; torch.tensor(a) #慢，不建议使用","tags":[],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Pytorch","slug":"编程/Pytorch","permalink":"http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Pytorch/"}]},{"title":"tmux","date":"2020-07-28T02:05:34.510Z","path":"wiki/Liunx/tmux/","text":"Tmux 常用操作大部分摘抄自这里 查看所有会话 1$ tmux ls # or $ tmux list-session 新建tmux会话 12$ tmux # 新建一个无名称的会话$ tmux new -s demo #新建一个名为 demo 的会话 断开当前会话，该会话会在后台运行 [Ctrl+b d] 1$ tmux detach # 断开当前会话，会话在后台运行 重新连接已存在的会话 1$ tmux a -t &lt;session-name&gt; # or $ tmux attach -t &lt;session-name&gt; 杀死、关闭会话 12$ tmux kill-session -t &lt;session-name&gt;$ tmux kill-sever # 关闭服务器，会关闭所有会话 切换会话 1$ tmux switch -t &lt;session-name&gt; 划分成上下两个窗格 1$ tmux split 划分成左右两个窗格 1$ tmux split -h 切换目标窗格 1- Ctrl+b 方向键上下左右 快捷键所有快捷键的前序按键是Ctrl+b，然后再按下面表中列出的按键 系统操作 窗口操作 面板操作","tags":[],"categories":[{"name":"Liunx","slug":"Liunx","permalink":"http://yoursite.com/categories/Liunx/"}]},{"title":"基本知识","date":"2020-07-28T02:05:34.510Z","path":"wiki/Liunx/基本知识/","text":"。。","tags":[],"categories":[{"name":"Liunx","slug":"Liunx","permalink":"http://yoursite.com/categories/Liunx/"}]},{"title":"常用命令","date":"2020-07-28T02:05:34.510Z","path":"wiki/Liunx/常用命令/","text":"软链接1$ ln -s src dst src 是实际文件夹的位置，dst 目录打算把快捷方式保存的目录 src 和 dst 都需要使用绝对目录，且会自动在当前目录下创建dst目录 如：ln -s /opt/linux/rootfs_dir /home/jyg/rootfs_dir 一些专用的操作查询GPU的使用情况以及杀死GPU上多个无用进程 查看GPU使用情况： 1$ nvidia-smi 查看GPU上进程情况 1$ fuser -v /dev/nvidia/* 一次性杀死多个进程 1$ ps -ef | grep firefox | grep -v grep | cut -c 9-15 | xargs kill -9 $ grep firefox 输出结果是：所有含有关键字 firefox 的进程 $ grep -v grep是在列出的进程中去掉含有关键字grep的进程，相当于去掉查询的这个进程 $ cut -c 9-15是截取输入行的第9个字符和第15个字符，9+6=15，正好是进程号PID共5位，不包含最后一个。即 index 为9，第一个字符 index 为0 $ xargs kill -s 9中的 xargs命令是用来把前面命令的输出结果（PID）作为 kill -9命令的参数，并执行该命令 $ kill -9会强行杀掉指定的进程","tags":[],"categories":[{"name":"Liunx","slug":"Liunx","permalink":"http://yoursite.com/categories/Liunx/"}]},{"title":"Git和Github","date":"2020-07-28T02:05:34.510Z","path":"wiki/其它/Git和Github/","text":"运行 ssh -T git@github.com 命令显示 `git@github.com: Permission denied (publickey)` 时这是因为本机的公钥没有上传到github中，github并不信任本机，所以只要把本机的公钥交给Github就可以了 先确定本机有没有公钥，windows系统下的公钥位置一般在 C://Users/用户名/.ssh中，其名称为：id_rsa.pub (注意一定不要泄露密钥，密钥文件和公钥文件同名，但没有后缀)，如果没有公钥，则在命令行中输入 $ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;，一路y或者回车（这样的话公钥是没有密码的) 有了公钥之后，在.ssh目录中我们用命令行获取公钥的内容 $ cat id_rsa.pub，全部复制显示出来的内容 随后登录自己的github，点击网页右上角头像，选择 Setting 选项，在接下来的界面中选择 SSH and GPG keys， 然后点击 New SSH key, 将刚刚复制的内容放到 Key栏目中并起好名字，此时问题解决。 修改上一次Commit的信息1$ git commit --amend 如果已经push了，那就不可能在被修改了，并且这个命令是修改的最近一次的提交的信息。","tags":[],"categories":[{"name":"其它","slug":"其它","permalink":"http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"}]},{"title":"Vscode","date":"2020-07-28T02:05:34.510Z","path":"wiki/其它/Vscode/","text":"远程服务器进行debug的方法 在Vscode中下载Remote Development插件，安装完毕后侧边栏会出现下图图标 点击此图标，选择SSH Target，并在随后显示的栏目中输入远程主机的地址：root@ip-sever 在配置文件中填写图下信息 Host表示别名，可以给远程主机取个名字 Hostname表示远程主机的ip地址 User表示用户名 Port表示用于登陆远程主机的端口（可以不写，我写了就不能连接，不知道为什么） 除了上述方法外，也可以使用下图的方式进入相关的配置文件 远程服务器免密登陆的方式（亦为SSH免密登录） 注：曾经尝试过很多方法，都是知其然不知其所以然，也不清楚为什么不好使，这些不好使的方法有 使用WinScp手动拷贝本机公钥到远程服务器上，然后执行 $ cat id_rsa.pub &gt;&gt; ~./.ssh/autorized_keys 好使的方法有，参考链接 （上述链接中”修改ssh配置“的步骤没有执行，因为没找到对应的文件。） 首先要有本机的公私钥，如果没有，先去生成，这里。 将本地的公钥安装到远程主机上：在本地主机中的ssh或者git bash中执行命令 1$ ssh-copy-id -i id_rsa.pub root@ip_sever （如果不好使，尝试命令：$ ssh-copy-id root@ip_sever） 随后到远程主机上查看.ssh/目录下的 authorized_keys 文件中是不是有了本地主机的公钥，这一步可以用 $ cat 命令 测试：在本机上执行下列命令，若直接登录不用输入密码即为成功 1$ ssh root@ip_sever 随后修改Vscode中的设置：在远程服务器信息中，添加如下信息： 1IdentityFile: \"C:\\Users\\用户名\\.ssh\\id_rsa\"","tags":[],"categories":[{"name":"其它","slug":"其它","permalink":"http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"}]},{"title":"hexo搭建博客","date":"2020-07-28T02:05:34.510Z","path":"wiki/其它/hexo搭建博客/","text":"hexo搭建博客的一些关键步骤 首先安装hexo，查阅其他资料 执行 $ hexo init &lt;folder name&gt;，若不输入folder name，则在当前目录初始化，反之，在当前目录创建folder name文件夹并初始化 执行 $ hexo install，安装package.json内的依赖包（可能需要更新依赖包的版本，自己查） 修改站点的配置文件_config.yml 执行命令 123$ hexo clean # 如果换主题了，一定要执行此命令$ hexo g #or $ hexo generation$ hexo sever # 映射到 localhost:4000，打开此网址可以查看 需要部署的话，在$ hexo g之后执行 1$ hexo d #or $ hexo deploy 一些坑和Bug 本Blog使用的Wiki主题：Wikitten 本Wiki尚未支持数学公式编辑（似乎），配置参考 wikitten 的Readme.md /source/_post中需要有文件，否则会 $ hexo g报错 尽量更新 node.js 到最新的版本 可能有用的一些posts Error: hexo generate fail - Template render error: (unknown path) , post 需要了解 Yaml的基本语法知识，vscode 中的yaml插件的报错可能并不准确 本Wiki的脚本策略：在这里","tags":[],"categories":[{"name":"其它","slug":"其它","permalink":"http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"}]},{"title":"杂七杂八","date":"2020-07-28T02:05:34.510Z","path":"wiki/其它/杂七杂八/","text":"Windows下如何使用makefile参考这里 关于CMake的使用CMake通常是可以通过cmakelist这个文件来生成相关的工程文件，比如我使用c++编程，使用vs2015的话，就需要打开sln这个工程文件来查看整个工程，包括其中的头文件和cpp文件。这时我们就需要使用cmake来生成这个对应的sln文件 确认cmakelist.txt文件的位置，并确认其确实存在 打开我们已经下载好的cMake程序 此时会显示如下窗口 第一行代表的是你要生成工程文件的源代码文件在哪，换句话说，就是cmkelist文件在那个路径 第二个代表的是你要把生成的工程文件（夹）放在哪个路径下面，可以通过点击后面的按钮来选择路径 之后点击Configure，显示如下，其中第一个下拉菜单表示你要生成的工程文件是那个程序使用的，下拉菜单里有很多很多，包括什么arm平台之类的，根据自己的实际情况来进行选择，别的不知道是什么，就不管了，直接点击Finish 若出现了错误信息 意思是我在opencvpath这个地方找不到opencv的cmake文件，应该对应其他的库会出现其他的错误信息，在这里我还没有遇到，遇到了以后会继续补充。 然后我们看上面 OpenCV_DIR这一栏写着not found，说明这里就是指示opencv的cmke的路径，我们把这里更改一下 再点击configure，出现如下信息 这样的话再点击generate，出现generating done的提示信息，就说明工程文件生成成功啦。","tags":[],"categories":[{"name":"其它","slug":"其它","permalink":"http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"}]}]}
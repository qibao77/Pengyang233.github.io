<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pengyang&#39;s wiki</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-28T02:05:34.514Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Pengyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GAN</title>
    <link href="http://yoursite.com/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/GAN/"/>
    <id>http://yoursite.com/wiki/深度学习/GAN/</id>
    <published>2020-07-28T02:05:34.514Z</published>
    <updated>2020-07-28T02:05:34.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h1><ul><li>在文章提出的时候，D和G都是MLP的形式，实验的数据库都是分辨率不大的数据库，如mnist<h3 id="Objective-Function"><a href="#Objective-Function" class="headerlink" title="Objective Function"></a>Objective Function</h3>$$<br>  min_Gmax_DV(D, G) = E_{x~p_{data(x)}}[logD(x)]+E_{z~p_z}[log(1-D(G(z)))]<br>$$<h3 id="Loss的代码实现"><a href="#Loss的代码实现" class="headerlink" title="Loss的代码实现"></a><a href="https://github.com/TwistedW/pytorch-GANs/blob/master/GAN.py" target="_blank" rel="noopener">Loss的代码实现</a></h3><ul><li>D<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BCELoss &#x3D; nn.BCELoss()</span><br><span class="line">...</span><br><span class="line">D_real &#x3D; netD(x)</span><br><span class="line">D_real_loss &#x3D; BCELoss(D_real, 1) %这里1的shape的应该是[bs,1]</span><br><span class="line">D_fake &#x3D; netD(netG(z))</span><br><span class="line">D_fake_loss &#x3D; BCELoss(D_fake, 0) %同上</span><br><span class="line">D_loss &#x3D; D_real_loss + D_fake_loss</span><br><span class="line">D_loss.backward()</span><br><span class="line">D_optimizer.step()</span><br></pre></td></tr></table></figure></li><li>G<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D_fake &#x3D; netD(netG(z))</span><br><span class="line">G_loss &#x3D; BCEloss(D_fake, 1)</span><br><span class="line">G_loss.backward()</span><br><span class="line">G_optimizer.step()</span><br></pre></td></tr></table></figure><h1 id="CGAN"><a href="#CGAN" class="headerlink" title="CGAN"></a>CGAN</h1></li></ul></li><li><p>在D和G的输入部分分别添加了条件向量 $y$，输入到网络的第一步是将输入进行cat</p><ul><li><p>PS:在原始的GAN中，输入和输出都是很小尺寸的图象，比如mnist中 $28\times28$ ，在代码实现中将图象resize成了一个向量然后和条件进行cat了。</p><h3 id="Objective-Function-1"><a href="#Objective-Function-1" class="headerlink" title="Objective Function:"></a>Objective Function:</h3><p>$$<br>min_Gmax_DV(D, G)=E_{x~p_{data(x)}}[logD(x|y)]+E_{z~p_z(z)}[log(1-D(G(z|y))]<br>$$</p><h3 id="Loss的代码实现："><a href="#Loss的代码实现：" class="headerlink" title="Loss的代码实现："></a><a href="https://github.com/TwistedW/pytorch-GANs/blob/master/CGAN.py" target="_blank" rel="noopener">Loss的代码实现</a>：</h3></li><li><p>D:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D_real &#x3D; netD(x, y)</span><br><span class="line">D_fake &#x3D; netD(z, y)</span><br><span class="line">D_real_loss &#x3D; nn.BCELoss()</span><br><span class="line">D_fake_loss &#x3D; nn.BCELoss()</span><br><span class="line">D_loss &#x3D; D_real_loss + D_fake_loss</span><br><span class="line">D.backward()</span><br><span class="line">D_optimizer.step()</span><br></pre></td></tr></table></figure></li><li>G<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">G_fake &#x3D; netG(z,y)</span><br><span class="line">D_fake &#x3D; net(G_fake, y)</span><br><span class="line">G_loss &#x3D; nn.BECLoss(D_fake, y_real_)</span><br><span class="line">G_loss.backward()</span><br><span class="line">G_optimizer.step()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="SAGAN"><a href="#SAGAN" class="headerlink" title="SAGAN"></a>SAGAN</h1><ul><li>SAGAN是在GAN的基础上添加了自注意力模块(self attention model)，考虑了长距离依赖的问题，生成的结果比较好。</li><li>目标函数没有改，和普通的GAN是一样的<h3 id="Loss代码实现"><a href="#Loss代码实现" class="headerlink" title="Loss代码实现"></a>Loss代码实现</h3></li><li>也可以用上面的bceloss来实现</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GAN&quot;&gt;&lt;a href=&quot;#GAN&quot; class=&quot;headerlink&quot; title=&quot;GAN&quot;&gt;&lt;/a&gt;GAN&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在文章提出的时候，D和G都是MLP的形式，实验的数据库都是分辨率不大的数据库，如mnist&lt;h3 id=&quot;Objecti
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>常用操作</title>
    <link href="http://yoursite.com/wiki/%E7%BC%96%E7%A8%8B/Matlab/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/wiki/编程/Matlab/常用操作/</id>
    <published>2020-07-28T02:05:34.514Z</published>
    <updated>2020-07-28T02:05:34.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一次性连续跑多个-m-文件"><a href="#一次性连续跑多个-m-文件" class="headerlink" title="一次性连续跑多个 .m 文件"></a>一次性连续跑多个 .m 文件</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clc;</span><br><span class="line">close;</span><br><span class="line">clear;</span><br><span class="line">run(<span class="string">'file1.m'</span>);  <span class="comment">% 若此.m文件不在路径中，则会报错，或者可以采用绝对路径来指示 .m 文件的位置</span></span><br><span class="line">clear;</span><br><span class="line">run(<span class="string">'file2.m'</span>);</span><br><span class="line">clear;</span><br><span class="line">run(<span class="string">'file3.m'</span>);</span><br></pre></td></tr></table></figure><p>其余的相关信息查阅 <code>run</code> 的文档</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一次性连续跑多个-m-文件&quot;&gt;&lt;a href=&quot;#一次性连续跑多个-m-文件&quot; class=&quot;headerlink&quot; title=&quot;一次性连续跑多个 .m 文件&quot;&gt;&lt;/a&gt;一次性连续跑多个 .m 文件&lt;/h2&gt;&lt;figure class=&quot;highlight ma
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Matlab" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Matlab/"/>
    
    
  </entry>
  
  <entry>
    <title>Conda</title>
    <link href="http://yoursite.com/wiki/%E7%BC%96%E7%A8%8B/Python/Conda/"/>
    <id>http://yoursite.com/wiki/编程/Python/Conda/</id>
    <published>2020-07-28T02:05:34.514Z</published>
    <updated>2020-07-28T02:05:34.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用-Conda-命令"><a href="#常用-Conda-命令" class="headerlink" title="常用 Conda 命令"></a>常用 <code>Conda</code> 命令</h2><h3 id="虚拟环境相关"><a href="#虚拟环境相关" class="headerlink" title="虚拟环境相关"></a>虚拟环境相关</h3><ul><li><p>激活虚拟环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> source activate env_name</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>退出当前的虚拟环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> source deactivate</span><br></pre></td></tr></table></figure></li><li><p>列出所有的虚拟环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> conda env list</span><br></pre></td></tr></table></figure></li><li><p>创建新的虚拟环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> conda creat <span class="literal">-n</span> new_env_name python=X.X <span class="comment">#指定新环境的python版本号，如3.6，2.7等</span></span><br><span class="line"><span class="variable">$</span> conda create <span class="literal">-n</span> new_env_name -<span class="literal">-clone</span> exist_env_name  <span class="comment"># 复制一个已有的虚拟环境, exist_env_name是当前存在的虚拟环境</span></span><br></pre></td></tr></table></figure></li><li><p>删除环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> conda env remove <span class="literal">-n</span> env_name</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用-Conda-命令&quot;&gt;&lt;a href=&quot;#常用-Conda-命令&quot; class=&quot;headerlink&quot; title=&quot;常用 Conda 命令&quot;&gt;&lt;/a&gt;常用 &lt;code&gt;Conda&lt;/code&gt; 命令&lt;/h2&gt;&lt;h3 id=&quot;虚拟环境相关&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Bug</title>
    <link href="http://yoursite.com/wiki/%E7%BC%96%E7%A8%8B/Pytorch/Bug/"/>
    <id>http://yoursite.com/wiki/编程/Pytorch/Bug/</id>
    <published>2020-07-28T02:05:34.514Z</published>
    <updated>2020-07-28T02:05:34.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RuntimeError-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation"><a href="#RuntimeError-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation" class="headerlink" title="RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation"></a>RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation</h3><ul><li><p>往往出现在更新代码 <code>model.step()</code> 之后</p></li><li><p>原因在于新版的<code>pytorch (v1.5+)</code> 似乎更新了什么，导致这一问题在老版本（可能是1.4以下）不会报错，而在新版会报错。</p></li><li><p>解决的方法：</p><ul><li><p><code>pytorch</code> 降级</p></li><li><p>查看是否包含<code>inplace</code>操作，可以重点查看：</p><ul><li><p>Relu等激活函数中传入的 <code>inplace</code>参数应为<code>False</code></p></li><li><p>有没有对<code>Tensor</code>有 <code>+=, -=, *=, /=</code>的类似操作，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a += b  <span class="comment">#a,b 都是Tensor</span></span><br></pre></td></tr></table></figure></li><li><p>对于<strong>GAN</strong>的训练来说，可能会有一些差别，问题常常出现在 <code>G/D_optim.step</code>处，查阅如下的帖子：<a href="https://github.com/pytorch/pytorch/issues/39141" target="_blank" rel="noopener">贴子1</a>，<a href="https://blog.csdn.net/andyL_05/article/details/106925344" target="_blank" rel="noopener">帖子2</a></p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;RuntimeError-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation&quot;&gt;&lt;a href=&quot;#RuntimeError-
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Pytorch" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Pytorch/"/>
    
    
  </entry>
  
  <entry>
    <title>常用操作</title>
    <link href="http://yoursite.com/wiki/%E7%BC%96%E7%A8%8B/Pytorch/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/wiki/编程/Pytorch/常用操作/</id>
    <published>2020-07-28T02:05:34.514Z</published>
    <updated>2020-07-28T02:05:34.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><ul><li><p><code>List</code> 转 <code>Tensor</code> ： 可以使用如下三种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; torch.cat(a)  <span class="comment"># Type(a) is List</span></span><br><span class="line">&gt;&gt; torch.stack(a)</span><br><span class="line">&gt;&gt; torch.tensor(a) <span class="comment">#慢，不建议使用</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据类型的转换&quot;&gt;&lt;a href=&quot;#数据类型的转换&quot; class=&quot;headerlink&quot; title=&quot;数据类型的转换&quot;&gt;&lt;/a&gt;数据类型的转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;List&lt;/code&gt; 转 &lt;code&gt;Tensor&lt;/code&gt; ：
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Pytorch" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/Pytorch/"/>
    
    
  </entry>
  
  <entry>
    <title>tmux</title>
    <link href="http://yoursite.com/wiki/Liunx/tmux/"/>
    <id>http://yoursite.com/wiki/Liunx/tmux/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tmux-常用操作"><a href="#Tmux-常用操作" class="headerlink" title="Tmux 常用操作"></a>Tmux 常用操作</h2><p>大部分摘抄自<a href="http://louiszhai.github.io/2017/09/30/tmux/" target="_blank" rel="noopener">这里</a></p><ul><li>查看所有会话</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux ls <span class="comment"># or $ tmux list-session</span></span><br></pre></td></tr></table></figure><ul><li>新建tmux会话</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux <span class="comment"># 新建一个无名称的会话</span></span><br><span class="line"><span class="variable">$</span> tmux new <span class="literal">-s</span> demo <span class="comment">#新建一个名为 demo 的会话</span></span><br></pre></td></tr></table></figure><ul><li>断开当前会话，该会话会在后台运行  [Ctrl+b d]</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux detach <span class="comment"># 断开当前会话，会话在后台运行</span></span><br></pre></td></tr></table></figure><ul><li>重新连接已存在的会话</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux a <span class="literal">-t</span> &lt;session<span class="literal">-name</span>&gt; <span class="comment"># or $ tmux attach -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><ul><li>杀死、关闭会话</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux kill<span class="literal">-session</span> <span class="literal">-t</span> &lt;session<span class="literal">-name</span>&gt;</span><br><span class="line"><span class="variable">$</span> tmux kill<span class="literal">-sever</span> <span class="comment"># 关闭服务器，会关闭所有会话</span></span><br></pre></td></tr></table></figure><ul><li>切换会话</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux <span class="keyword">switch</span> <span class="literal">-t</span> &lt;session<span class="literal">-name</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>划分成上下两个窗格</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux split</span><br></pre></td></tr></table></figure><ul><li>划分成左右两个窗格</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tmux split <span class="literal">-h</span></span><br></pre></td></tr></table></figure><ul><li>切换目标窗格</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Ctrl+b 方向键上下左右</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>所有快捷键的前序按键是<code>Ctrl+b</code>，然后再按下面表中列出的按键</p><h3 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h3><p><img src="clip_image001.png" alt="系统操作"></p><h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><p><img src="clip_image001-1595899182532.png" alt="窗口操作"></p><h3 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h3><p><img src="clip_image001-1595899216613.png" alt="面板操作"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tmux-常用操作&quot;&gt;&lt;a href=&quot;#Tmux-常用操作&quot; class=&quot;headerlink&quot; title=&quot;Tmux 常用操作&quot;&gt;&lt;/a&gt;Tmux 常用操作&lt;/h2&gt;&lt;p&gt;大部分摘抄自&lt;a href=&quot;http://louiszhai.github.io/
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
  </entry>
  
  <entry>
    <title>基本知识</title>
    <link href="http://yoursite.com/wiki/Liunx/%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/wiki/Liunx/基本知识/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<p>。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;。。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
  </entry>
  
  <entry>
    <title>常用命令</title>
    <link href="http://yoursite.com/wiki/Liunx/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/wiki/Liunx/常用命令/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ln <span class="literal">-s</span> src dst</span><br></pre></td></tr></table></figure><ul><li><p><code>src</code> 是<strong>实际文件夹</strong>的位置，<code>dst</code> 目录打算把<strong>快捷方式</strong>保存的目录</p></li><li><p><code>src</code> 和 <code>dst</code> 都需要使用<strong>绝对目录</strong>，且会自动在当前目录下创建<code>dst</code>目录</p></li><li><p>如：<code>ln -s /opt/linux/rootfs_dir /home/jyg/rootfs_dir</code></p></li></ul><h3 id="一些专用的操作"><a href="#一些专用的操作" class="headerlink" title="一些专用的操作"></a>一些专用的操作</h3><h4 id="查询GPU的使用情况以及杀死GPU上多个无用进程"><a href="#查询GPU的使用情况以及杀死GPU上多个无用进程" class="headerlink" title="查询GPU的使用情况以及杀死GPU上多个无用进程"></a>查询GPU的使用情况以及杀死GPU上多个无用进程</h4><ul><li><p>查看GPU使用情况：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> nvidia<span class="literal">-smi</span></span><br></pre></td></tr></table></figure></li><li><p>查看GPU上进程情况</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> fuser <span class="literal">-v</span> /dev/nvidia/*</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>一次性杀死多个进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ps <span class="literal">-ef</span> | grep firefox | grep <span class="literal">-v</span> grep | cut <span class="literal">-c</span> <span class="number">9</span><span class="literal">-15</span> | xargs kill <span class="literal">-9</span></span><br></pre></td></tr></table></figure><ul><li><code>$ grep firefox</code> 输出结果是：所有含有关键字 firefox 的进程</li><li><code>$ grep -v grep</code>是在列出的进程中去掉含有关键字<code>grep</code>的进程，相当于去掉查询的这个进程</li><li><code>$ cut -c 9-15</code>是截取输入行的第9个字符和第15个字符，9+6=15，正好是进程号PID共5位，不包含最后一个。即 index 为9，第一个字符 index 为0 </li><li><code>$ xargs kill -s 9</code>中的 <code>xargs</code>命令是用来把前面命令的输出结果（PID）作为 <code>kill -9</code>命令的参数，并执行该命令</li><li><code>$ kill -9</code>会强行杀掉指定的进程</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;软链接&quot;&gt;&lt;a href=&quot;#软链接&quot; class=&quot;headerlink&quot; title=&quot;软链接&quot;&gt;&lt;/a&gt;软链接&lt;/h4&gt;&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="Liunx" scheme="http://yoursite.com/categories/Liunx/"/>
    
    
  </entry>
  
  <entry>
    <title>Git和Github</title>
    <link href="http://yoursite.com/wiki/%E5%85%B6%E5%AE%83/Git%E5%92%8CGithub/"/>
    <id>http://yoursite.com/wiki/其它/Git和Github/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行-ssh-T-git-github-com-命令显示-git-github-com-Permission-denied-publickey-时"><a href="#运行-ssh-T-git-github-com-命令显示-git-github-com-Permission-denied-publickey-时" class="headerlink" title="运行 ssh -T git@github.com 命令显示 `git@github.com: Permission denied (publickey)` 时"></a>运行 <code>ssh -T git@github.com</code> 命令显示 <a href="mailto:`git@github.com">`git@github.com</a>: Permission denied (publickey)` 时</h2><p>这是因为本机的公钥没有上传到github中，github并不信任本机，所以只要把本机的公钥交给Github就可以了</p><ul><li>先确定本机有没有公钥，windows系统下的<strong>公钥</strong>位置一般在 <code>C://Users/用户名/.ssh</code>中，其名称为：<code>id_rsa.pub</code> (<strong>注意一定不要泄露密钥，密钥文件和公钥文件同名，但没有后缀)</strong>，如果没有公钥，则在命令行中输入 <code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code>，一路y或者回车（这样的话公钥是没有密码的)</li><li>有了公钥之后，在<code>.ssh</code>目录中我们用命令行获取公钥的内容 <code>$ cat id_rsa.pub</code>，全部复制显示出来的内容</li><li>随后登录自己的github，点击网页右上角头像，选择 Setting 选项，在接下来的界面中选择 SSH and GPG keys， 然后点击 New SSH key, 将刚刚复制的内容放到 Key栏目中并起好名字，此时问题解决。</li></ul><h2 id="修改上一次Commit的信息"><a href="#修改上一次Commit的信息" class="headerlink" title="修改上一次Commit的信息"></a>修改上一次Commit的信息</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git commit -<span class="literal">-amend</span></span><br></pre></td></tr></table></figure><ul><li>如果已经push了，那就不可能在被修改了，并且这个命令是修改的最近一次的提交的信息。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运行-ssh-T-git-github-com-命令显示-git-github-com-Permission-denied-publickey-时&quot;&gt;&lt;a href=&quot;#运行-ssh-T-git-github-com-命令显示-git-github-com-Per
      
    
    </summary>
    
      <category term="其它" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Vscode</title>
    <link href="http://yoursite.com/wiki/%E5%85%B6%E5%AE%83/Vscode/"/>
    <id>http://yoursite.com/wiki/其它/Vscode/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="远程服务器进行debug的方法"><a href="#远程服务器进行debug的方法" class="headerlink" title="远程服务器进行debug的方法"></a>远程服务器进行debug的方法</h2><ol><li><p>在Vscode中下载<code>Remote Development</code>插件，安装完毕后侧边栏会出现下图图标</p><p><img src="clip_image001.png" alt="侧边栏" style="zoom:67%;" /></p></li><li><p>点击此图标，选择<code>SSH Target</code>，并在随后显示的栏目中输入远程主机的地址：<code>root@ip-sever</code></p><p><img src="image-20200728093043812.png" alt="image-20200728093043812"></p></li><li><p>在配置文件中填写图下信息</p><p><img src="clip_image001-1595899620602.png" alt="Host NUSTM1080Ti  Hostname  user  port 'LA " style="zoom: 80%;" /></p><p><code>Host</code>表示别名，可以给远程主机取个名字</p><p><code>Hostname</code>表示远程主机的ip地址</p><p><code>User</code>表示用户名</p><p><code>Port</code>表示用于登陆远程主机的端口（可以不写，我写了就不能连接，不知道为什么）</p></li><li><p>除了上述方法外，也可以使用下图的方式进入相关的配置文件</p><p><img src="clip_image001-1595899757562.png" alt="4"></p></li></ol><h2 id="远程服务器免密登陆的方式（亦为SSH免密登录）"><a href="#远程服务器免密登陆的方式（亦为SSH免密登录）" class="headerlink" title="远程服务器免密登陆的方式（亦为SSH免密登录）"></a>远程服务器免密登陆的方式（亦为SSH免密登录）</h2><ul><li><p>注：曾经尝试过很多方法，都是知其然不知其所以然，也不清楚为什么不好使，这些不好使的方法有</p><ul><li>使用WinScp手动拷贝本机公钥到远程服务器上，然后执行 <code>$ cat id_rsa.pub &gt;&gt; ~./.ssh/autorized_keys</code></li></ul></li><li><p>好使的方法有，<a href="https://my.oschina.net/shipley/blog/1507337" target="_blank" rel="noopener">参考链接</a></p><ul><li><p>（上述链接中”修改ssh配置“的步骤没有执行，因为没找到对应的文件。）</p></li><li><p>首先要有本机的公私钥，如果没有，先去生成，<a href="onenote:#Git和Github连用时候遇到的一些问题&amp;section-id={BC74817B-D213-4487-B52B-D0D78B7EAA94}&amp;page-id={C9623924-9FF9-4A11-8AF2-5028B5A50AE5}&amp;object-id={AB7C674A-EC74-0A3F-0666-F207FD7D247C}&amp;37&amp;base-path=https://d.docs.live.net/088ed623a0aa0a23/文档/编程/其他编程.one">这里</a>。</p></li><li><p>将本地的公钥安装到远程主机上：在本地主机中的ssh或者git bash中执行命令 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ssh<span class="literal">-copy</span><span class="literal">-id</span> <span class="literal">-i</span> id_rsa.pub root@ip_sever</span><br></pre></td></tr></table></figure><p>（如果不好使，尝试命令：<code>$ ssh-copy-id root@ip_sever</code>）</p><p>随后到远程主机上查看<code>.ssh/</code>目录下的 <code>authorized_keys</code> 文件中是不是有了本地主机的公钥，这一步可以用 <code>$ cat</code> 命令</p></li></ul><ul><li><p>测试：在本机上执行下列命令，若直接登录不用输入密码即为成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ssh root@ip_sever</span><br></pre></td></tr></table></figure></li><li><p>随后修改Vscode中的设置：在远程服务器信息中，添加如下信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IdentityFile: "C:\Users\用户名\.ssh\id_rsa"</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;远程服务器进行debug的方法&quot;&gt;&lt;a href=&quot;#远程服务器进行debug的方法&quot; class=&quot;headerlink&quot; title=&quot;远程服务器进行debug的方法&quot;&gt;&lt;/a&gt;远程服务器进行debug的方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Vscode中下
      
    
    </summary>
    
      <category term="其它" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="http://yoursite.com/wiki/%E5%85%B6%E5%AE%83/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/wiki/其它/hexo搭建博客/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo搭建博客的一些关键步骤"><a href="#hexo搭建博客的一些关键步骤" class="headerlink" title="hexo搭建博客的一些关键步骤"></a>hexo搭建博客的一些关键步骤</h3><ul><li><p>首先安装hexo，查阅其他资料</p></li><li><p>执行 <code>$ hexo init &lt;folder name&gt;</code>，若不输入<code>folder name</code>，则在当前目录初始化，反之，在当前目录创建<code>folder name</code>文件夹并初始化</p></li><li><p>执行 <code>$ hexo install</code>，安装<code>package.json</code>内的依赖包（可能需要更新依赖包的版本，自己查）</p></li><li><p>修改站点的配置文件<code>_config.yml</code></p></li><li><p>执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo clean <span class="comment"># 如果换主题了，一定要执行此命令</span></span><br><span class="line"><span class="variable">$</span> hexo g <span class="comment">#or $ hexo generation</span></span><br><span class="line"><span class="variable">$</span> hexo sever <span class="comment"># 映射到 localhost:4000，打开此网址可以查看</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>需要部署的话，在<code>$ hexo g</code>之后执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo d <span class="comment">#or $ hexo deploy</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="一些坑和Bug"><a href="#一些坑和Bug" class="headerlink" title="一些坑和Bug"></a>一些坑和Bug</h3><ul><li><p>本Blog使用的Wiki主题：<a href="https://github.com/zthxxx/hexo-theme-Wikitten" target="_blank" rel="noopener">Wikitten</a></p></li><li><p>本Wiki尚未支持数学公式编辑（似乎），配置参考 wikitten 的Readme.md</p></li><li><p><code>/source/_post</code>中需要有文件，否则会 <code>$ hexo g</code>报错</p></li><li><p>尽量更新 <code>node.js</code> 到最新的版本</p></li><li><p>可能有用的一些posts </p></li><li><p>Error: hexo generate fail - Template render error: (unknown path) , <a href="https://github.com/hexojs/hexo/issues/1837" target="_blank" rel="noopener">post</a></p></li><li><p>需要了解 <code>Yaml</code>的基本语法知识，vscode 中的<code>yaml</code>插件的报错可能并不准确</p></li><li><p>本Wiki的脚本策略：<a href="https://github.com/Pengyang233/scripts/tree/master/script%20for%20hexo" target="_blank" rel="noopener">在这里</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hexo搭建博客的一些关键步骤&quot;&gt;&lt;a href=&quot;#hexo搭建博客的一些关键步骤&quot; class=&quot;headerlink&quot; title=&quot;hexo搭建博客的一些关键步骤&quot;&gt;&lt;/a&gt;hexo搭建博客的一些关键步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先安装hexo，
      
    
    </summary>
    
      <category term="其它" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>杂七杂八</title>
    <link href="http://yoursite.com/wiki/%E5%85%B6%E5%AE%83/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    <id>http://yoursite.com/wiki/其它/杂七杂八/</id>
    <published>2020-07-28T02:05:34.510Z</published>
    <updated>2020-07-28T02:05:34.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows下如何使用makefile"><a href="#Windows下如何使用makefile" class="headerlink" title="Windows下如何使用makefile"></a>Windows下如何使用makefile</h2><p>参考<a href="https://www.cnblogs.com/cvbnm/articles/1954872.html" target="_blank" rel="noopener">这里</a></p><h2 id="关于CMake的使用"><a href="#关于CMake的使用" class="headerlink" title="关于CMake的使用"></a>关于CMake的使用</h2><p>CMake通常是可以通过cmakelist这个文件来生成相关的工程文件，比如我使用c++编程，使用vs2015的话，就需要打开sln这个工程文件来查看整个工程，包括其中的头文件和cpp文件。这时我们就需要使用cmake来生成这个对应的sln文件</p><ul><li>确认<code>cmakelist.txt</code>文件的位置，并确认其确实存在</li></ul><p><img src="image-20200728095552384.png" alt="image-20200728095552384" style="zoom:80%;" /></p><ul><li><p>打开我们已经下载好的cMake程序</p><p><img src="clip_image001.png" alt="cmake-gui"></p><p>此时会显示如下窗口</p><p><img src="clip_image001-1595901070102.png" alt="windoes"></p><ul><li>第一行代表的是你要生成工程文件的源代码文件在哪，换句话说，就是cmkelist文件在那个路径</li><li>第二个代表的是你要把生成的工程文件（夹）放在哪个路径下面，可以通过点击后面的按钮来选择路径</li></ul></li><li><p>之后点击<code>Configure</code>，显示如下，其中第一个下拉菜单表示你要生成的工程文件是那个程序使用的，下拉菜单里有很多很多，包括什么arm平台之类的，根据自己的实际情况来进行选择，别的不知道是什么，就不管了，直接点击<code>Finish</code></p></li></ul><p><img src="image-20200728095621523.png" alt="image-20200728095621523" style="zoom:80%;" /></p><ul><li><p>若出现了错误信息</p><p><img src="image-20200728095802917.png" alt="image-20200728095802917"></p><p>意思是我在<code>opencvpath</code>这个地方找不到<code>opencv</code>的<code>cmake</code>文件，应该对应其他的库会出现其他的错误信息，在这里我还没有遇到，遇到了以后会继续补充。</p><p>然后我们看上面</p><p><img src="image-20200728100011601.png" alt="image-20200728100011601" style="zoom:80%;" /></p><p><code>OpenCV_DIR</code>这一栏写着not found，说明这里就是指示opencv的cmke的路径，我们把这里更改一下</p><p><img src="image-20200728100042357.png" alt="image-20200728100042357" style="zoom:80%;" /></p></li><li><p>再点击<code>configure</code>，出现如下信息</p><p><img src="image-20200728100114658.png" alt="image-20200728100114658" style="zoom:80%;" /></p><p>这样的话再点击generate，出现generating done的提示信息，就说明工程文件生成成功啦。</p><p><img src="image-20200728100147296.png" alt="image-20200728100147296" style="zoom:80%;" /></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Windows下如何使用makefile&quot;&gt;&lt;a href=&quot;#Windows下如何使用makefile&quot; class=&quot;headerlink&quot; title=&quot;Windows下如何使用makefile&quot;&gt;&lt;/a&gt;Windows下如何使用makefile&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="其它" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
</feed>
